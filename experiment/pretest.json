{
    "version": 2.0,
    "questions": [
        {
            "question": "1. Which data structure is best suitable for performing breadth first search?",
            "answers": {
                "a": "Stack",
                "b": "Queue",
                "c": "Array",
                "d": "None of the above"
            },
            "correctAnswer": "b",
            "explanations": {
                "b": "In breadth first search we do backtracking, and go along the breadth of the tree while searching. Initially we enqueue all adjacent nodes of the root node. Nex we dequeue a node from the queue and again enqueue all of it\u2019s adjacent nodes. As we are using a queue, the next node would be an adjacent node to the initial root node as the queue is First in First Out."
            },
            "difficulty": "beginner"
        },
        {
            "question": "2. Which data structure is best suitable for performing Depth first search?",
            "answers": {
                "a": "Stack",
                "b": "Queue",
                "c": "Array",
                "d": "None of the above"
            },
            "correctAnswer": "a",
            "explanations": {
                "b": "In depth first search, we go in the order of last in first out. Find a node, display it, push it to stack and go to the first adjacent node. Once we reach an end. We pop from stack and check to see if there is any additional adjacent node available. Hence stack is used."
            },
            "difficulty": "beginner"
        },
        {
            "question": "3. Given a tree of nodes. We know that the element we want to search is closer to the root node than farther. Which would be the best method to search for it.",
            "answers": {
                "a": "Binary Search",
                "b": "Breadth First Search",
                "c": "Depth First Search",
                "d": "All are equally good"
            },
            "correctAnswer": "b",
            "explanations": {
                "a": "Although binary search is one of the better searching algorithms, we are not sure if the tree given to us follows the requirements of binary search (i.e. tree is balanced), hence we cannot for certain conclude.",
                "b": "Breadth first search is the best search to find the node that is closer to node, as we go searching level by level.",
                "c": "In Depth first search we go to the last available level of every node, and then search for neighbours. Let us assume we have a tree of 7 levels. And the element we want to find is the 7th element of the first level. Imagine traversing 7 levels 7 times before finding. Hence it is not the best way.",
                "d": "All are not equally good."
            },
            "difficulty": "beginner"
        }
    ]
}
